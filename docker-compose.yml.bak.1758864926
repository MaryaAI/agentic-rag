version: '3.8'

services:
  # Postgres with pgvector (used by the app)
  db:
    image: pgvector/pgvector:pg16
    container_name: rag-postgres
    environment:
      # these pull values from your .env (see note below)
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      # run init-db.sql on first initialization
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - rag_data:/var/lib/postgresql/data
    restart: unless-stopped

  # Your CrewAI RAG API service
  rag-api:
    build: .
    container_name: crewai_rag_api
    env_file:
      - .env
    environment:
      # Use the "db" service hostname for internal networking
      DATABASE_URL: "postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}"
    ports:
      - "8000:8000"
    depends_on:
      - db
    # If your app needs to reach services running on the host (e.g. Ollama on your laptop),
    # keep host.docker.internal mapping so the container can resolve the host.
    extra_hosts:
      - "host.docker.internal:host-gateway"
    restart: always

  # The OpenWebUI frontend service (fixed the volume)
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: open-webui
    ports:
      - "3000:8080"
    volumes:
      - openwebui_data:/data
    restart: unless-stopped

volumes:
  rag_data:
  openwebui_data:


# version: '3.8'

# services:
#   # Your CrewAI RAG API service
#   rag-api:
#     build: . # Build the image from the Dockerfile in the current directory
#     container_name: crewai_rag_api
#     environment:
#       # Pass the DATABASE_URL to the API container.
#       # 'host.docker.internal' is a special DNS name that points to the host machine.
#       DATABASE_URL: postgresql://${DB_USER}:${DB_PASSWORD}@host.docker.internal:${DB_PORT}/${DB_NAME}
#     ports:
#       - "8000:8000"
#     # This allows the container to resolve 'host.docker.internal'
#     extra_hosts:
#       - "host.docker.internal:host-gateway"
#     restart: always

#   # The OpenWebUI frontend service
#   open-webui:
#     image: ghcr.io/open-webui/open-webui:main
#     container_name: open-webui
#     ports:
#       - "3000:8080"
#     volumes:
#       - o

  